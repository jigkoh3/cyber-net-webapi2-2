<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "api/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.Description;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>
using BLL.Service;
namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
    public class <#= ControllerName #> : ApiController
    {
        private readonly I<#= entitySetName #>Service _<#= entitySetName #>Service;

		public <#= ControllerName #>(I<#= entitySetName #>Service <#= entitySetName #>Service)
		{
			_<#= entitySetName #>Service = <#= entitySetName #>Service;
		}

        // GET: <#= routePrefix #>
        public IQueryable<<#= ModelTypeName #>> Get<#= entitySetName #>()
        {
            return _<#= entitySetName #>Service.Get<#= entitySetName #>();
        }

        // GET: <#= routePrefix #>/5
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await _<#= entitySetName #>Service.Get<#= entitySetName #>Async(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = _<#= entitySetName #>Service.Get<#= entitySetName #>(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

            return Ok(<#= ModelVariable #>);
        }

        // PUT: <#= routePrefix #>/5
        [ResponseType(typeof(void))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != <#= ModelVariable #>.<#= primaryKeyName #>)
            {
                return BadRequest();
            }


            try
            {
<# if (UseAsync) { #>
                await _<#= entitySetName #>Service.Update<#= entitySetName #>Async(<#= ModelVariable #>);
<# } else { #>
                _<#= entitySetName #>Service.Update<#= entitySetName #>(<#= ModelVariable #>);
<# } #>
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= ModelTypeName #>Exists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: <#= routePrefix #>
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

<# if(primaryKeyIsAutoGenerated) { #>
<#		if (UseAsync) { #>
            await  _<#= entitySetName #>Service.Create<#= entitySetName #>Async(<#= ModelVariable #>);
<#		} else { #>
             _<#= entitySetName #>Service.Create<#= entitySetName #>(<#= ModelVariable #>);
<#		} #>
<# } else { #>

            try
            {
<#		if (UseAsync) { #>
                await  _<#= entitySetName #>Service.Create<#= entitySetName #>Async(<#= ModelVariable #>);
<#		} else { #>
                 _<#= entitySetName #>Service.Create<#= entitySetName #>(<#= ModelVariable #>);
<#		} #>
            }
            catch (DbUpdateException)
            {
                if (<#= ModelTypeName #>Exists(<#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }
<# } #>

            return CreatedAtRoute("DefaultApi", new { id = <#= ModelVariable #>.<#= primaryKeyName #> }, <#= ModelVariable #>);
        }

        // DELETE: <#= routePrefix #>/5
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await _<#= entitySetName #>Service.Get<#= entitySetName #>Async(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> =  _<#= entitySetName #>Service.Get<#= entitySetName #>(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

<# if (UseAsync) { #>
            await _<#= entitySetName #>Service.Delete<#= entitySetName #>Async(id);
<# } else { #>
            _<#= entitySetName #>Service.Delete<#= entitySetName #>(id);
<# } #>

            return Ok(<#= ModelVariable #>);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                 _<#= entitySetName #>Service.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool <#= ModelTypeName #>Exists(<#= primaryKeyShortTypeName #> id)
        {
            <# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await _<#= entitySetName #>Service.Get<#= entitySetName #>Async(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> =  _<#= entitySetName #>Service.Get<#= entitySetName #>(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return false;
            }
			return true;
        }
    }
}

using DAL.Entity.Models;
using DAL.Repository;
using Microsoft.Practices.Unity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http.ModelBinding;

namespace BLL.Service
{
    public interface I<#= entitySetName #>Service : IDisposable
    {
        IQueryable<<#= ModelTypeName #>> Get<#= entitySetName #>();
        <#= ModelTypeName #> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id);
        void Create<#= entitySetName #>(<#= ModelTypeName #> <#= ModelVariable #>);
        void Update<#= entitySetName #>(<#= ModelTypeName #> <#= ModelVariable #>);
        void Delete<#= entitySetName #>(<#= primaryKeyShortTypeName #> id);
    }

	public class <#= entitySetName #>Service : I<#= entitySetName #>Service
    {
        private readonly IUnitOfWork _unitOfWork;
        public  <#= entitySetName #>Service([Dependency("UnitOfWork")] IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public void Dispose()
        {
            _unitOfWork.Dispose();
        }



        public IQueryable<<#= ModelTypeName #>> Get<#= entitySetName #>()
        {
            return _unitOfWork.Repository<<#= ModelTypeName #>>().Query().Get();
        }

        public <#= ModelTypeName #> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
        {
            return _unitOfWork.Repository<<#= ModelTypeName #>>().Find(id);
        }

        public void Create<#= entitySetName #>(<#= ModelTypeName #> <#= ModelVariable #>)
        {
            <#= ModelVariable #>.Created = DateTime.Now;
            _unitOfWork.Repository<<#= ModelTypeName #>>().Insert(<#= ModelVariable #>);
            _unitOfWork.Save();
        }

        public void Update<#= entitySetName #>(<#= ModelTypeName #> <#= ModelVariable #>)
        {
            _unitOfWork.Repository<<#= ModelTypeName #>>().Update(<#= ModelVariable #>);
            _unitOfWork.Save();
        }

        public void Delete<#= entitySetName #>(<#= primaryKeyShortTypeName #> id)
        {
            _unitOfWork.Repository<<#= ModelTypeName #>>().Delete(id);
            _unitOfWork.Save();
        }


       
    }
}

